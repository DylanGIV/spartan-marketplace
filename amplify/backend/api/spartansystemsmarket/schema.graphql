type Rfq @model @auth(rules: [{allow: public}]) {
  id: ID!
  rfqNumber: String
  dateSent: AWSDateTime
  custRefNum: String
  companyName: String
  contact: String
  phone: AWSPhone
  email: AWSEmail
  shippingTerms: String
  shippingMethod: String
  leadTime: Int
  paymentTerms: String
  dueDate: AWSDateTime
  quantityRequested: [Int]
  quantityQuoted: [Int]
  uom: String
  urgency: String
  discount: Float
  lineTotal: Float
  subtotal: Float
  salesTax: Float
  total: Float
  internalComments: String
  emailComments: String
  addressLine1: String
  addressLine2: String
  city: String
  state: String
  zip: String
  country: String
  itemIDs: [ID]
  receivingCompanyID: ID!
  sendingCompanyID: ID!
  ReceivingCompany: Company @belongsTo(fields: ["receivingCompanyID"])
  SendingCompany: Company @belongsTo(fields: ["sendingCompanyID"])
}

type UserDetails @model @auth(rules: [{allow: owner}, {allow: public}]) {
  id: ID!
  userID: ID
  firstName: String
  lastName: String
  contactEmail: AWSEmail
  contactPhone: AWSPhone
  companyID: ID! @index(name: "byCompany")
  BillingAddresses: [BillingAddress] @manyToMany(relationName: "UserDetailsBillingAddress")
  ShippingAddresses: [ShippingAddress] @manyToMany(relationName: "UserDetailsShippingAddress")
  isCompanyOwner: Boolean
}

type Country @model @auth(rules: [{allow: public}]) {
  id: ID!
  countryName: String
  code: String
  BillingAddresses: [BillingAddress] @hasMany(indexName: "byCountry", fields: ["id"])
  ShippingAddresses: [ShippingAddress] @hasMany(indexName: "byCountry", fields: ["id"])
}

type ShippingAddress @model @auth(rules: [{allow: public}]) {
  id: ID!
  unitNumber: String
  streetNumber: String
  addressLine1: String
  addressLine2: String
  city: String
  regi: String
  postalCode: String
  isDefault: Boolean
  countryID: ID! @index(name: "byCountry")
  UserShippingAddresses: [UserDetails] @manyToMany(relationName: "UserDetailsShippingAddress")
  CompanyShippingAddresses: [Company] @manyToMany(relationName: "CompanyShippingAddress")
}

type BillingAddress @model @auth(rules: [{allow: public}]) {
  id: ID!
  unitNumber: String
  streetNumber: String
  addressLine1: String
  addressLine2: String
  city: String
  region: String
  postalCode: String
  isDefault: Boolean
  CompanyBillingAddresses: [Company] @manyToMany(relationName: "CompanyBillingAddress")
  countryID: ID! @index(name: "byCountry")
  UserBillingAddresses: [UserDetails] @manyToMany(relationName: "UserDetailsBillingAddress")
}

type Company @model @auth(rules: [{allow: public}]) {
  id: ID!
  companyName: String
  phone: AWSPhone
  contactEmail: AWSEmail
  Items: [Item] @hasMany(indexName: "byCompany", fields: ["id"])
  ItemMROS: [ItemMRO] @hasMany(indexName: "byCompany", fields: ["id"])
  BillingAddresses: [BillingAddress] @manyToMany(relationName: "CompanyBillingAddress")
  CompanyMembers: [UserDetails] @hasMany(indexName: "byCompany", fields: ["id"])
  CompanyOwner: UserDetails @hasOne
  ShippingAddresses: [ShippingAddress] @manyToMany(relationName: "CompanyShippingAddress")
  countryID: ID @index(name: "byCountry")
  profilePictureUrl: String
  fax: String
  companyDescription: String
  sentRfqs: [Rfq] @hasMany
  receivedRfqs: [Rfq] @hasMany
}

type ItemMRO @model @auth(rules: [{allow: public}]) {
  id: ID!
  nsn: String
  partNumber: String
  altPartNumber: String
  description: String
  quantity: Int
  price: Float
  certification: String
  companyID: ID! @index(name: "byCompany")
  imageUrls: [String]
}

type Item @model @auth(rules: [{allow: public}]) {
  id: ID!
  nsn: String
  partNumber: String
  altPartNumber: String
  description: String
  quantity: Int
  condition: String
  control: String
  price: Float
  companyID: ID! @index(name: "byCompany")
  imageUrls: [String]
} 